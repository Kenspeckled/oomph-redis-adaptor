// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, _, _oomphRedisObjectSaveQueueCallbacks, _utilities, addToWriteQueue, clearUniqueQueuedIds, generateId, generateUniqueId, indexSearchableString, indexSortedSet, numberOfExtraCharactersOnId, performValidations, processWriteQueue, sendAttributesForSaving, writeAttributes,
    slice = [].slice;

  Promise = require('promise');

  _ = require('lodash');

  _utilities = require('./utilities');

  _oomphRedisObjectSaveQueueCallbacks = {};

  numberOfExtraCharactersOnId = 2;

  generateId = function() {
    var d, s;
    d = new Date();
    s = (+d).toString(36);
    return s + _utilities.randomString(numberOfExtraCharactersOnId);
  };

  generateUniqueId = function() {
    var condition, newIdPromise, self, uniqueId;
    self = this;
    uniqueId = false;
    condition = function() {
      return uniqueId === false;
    };
    return newIdPromise = _utilities.promiseWhile(condition, function() {
      return new Promise(function(resolve) {
        var id;
        id = generateId();
        return self.redis.lrange(self.name + '#uniqueQueuedIds', 0, -1, function(error, idsArray) {
          if (_.includes(idsArray, id)) {
            id = generateId();
            return resolve();
          } else {
            return self.redis.rpush(self.name + '#uniqueQueuedIds', id, function(error, response) {
              uniqueId = true;
              return resolve(id);
            });
          }
        });
      });
    });
  };

  indexSortedSet = function(setKey, attr) {
    var addToTmpSetPromise, listKey, setTmpKey, sortPromise;
    listKey = setKey + 'TempList';
    setTmpKey = setKey + 'TempList';
    sortPromise = new Promise((function(_this) {
      return function(resolve, reject) {
        return _this.redis.sort(setKey, 'by', _this.name + ':*->' + attr, 'alpha', 'store', listKey, function(error, newLength) {
          return resolve(newLength);
        });
      };
    })(this));
    addToTmpSetPromise = sortPromise.then((function(_this) {
      return function(listLength) {
        var multi;
        multi = _this.redis.multi();
        return new Promise(function(resolve, reject) {
          _.times(listLength, function() {
            return multi.lpop(listKey);
          });
          return multi.exec(function(error, ids) {
            var addToSet;
            addToSet = _.map(ids, function(id, i) {
              return new Promise(function(r) {
                return _this.redis.zadd(setTmpKey, listLength - i, id, function(res) {
                  return r();
                });
              });
            });
            return resolve(Promise.all(addToSet));
          });
        });
      };
    })(this));
    return addToTmpSetPromise.then((function(_this) {
      return function() {
        return new Promise(function(resolve) {
          return _this.redis.rename(setTmpKey, setKey, function(res) {
            return resolve();
          });
        });
      };
    })(this));
  };

  indexSearchableString = function(attr, words, id) {
    var char, indexPromiseFn, indexPromises, j, k, len, len1, ref, word, wordSegment, wordSegmentKey;
    indexPromises = [];
    ref = words.split(/\s/);
    for (j = 0, len = ref.length; j < len; j++) {
      word = ref[j];
      word = word.toLowerCase();
      wordSegment = '';
      for (k = 0, len1 = word.length; k < len1; k++) {
        char = word[k];
        wordSegment += char;
        wordSegmentKey = this.name + '#' + attr + '/' + wordSegment;
        indexPromiseFn = (function(_this) {
          return function(wordSegmentKey, id) {
            return new Promise(function(resolve) {
              return _this.redis.zadd(wordSegmentKey, 1, id, function(res) {
                return resolve();
              });
            });
          };
        })(this);
        indexPromises.push(indexPromiseFn(wordSegmentKey, id));
      }
    }
    return Promise.all(indexPromises);
  };

  writeAttributes = function(props) {
    var idPromise, indexPromise, newObjectFlag, self, writePromise;
    self = this;
    newObjectFlag = false;
    idPromise = new Promise(function(resolve) {
      if (!props.id) {
        newObjectFlag = true;
        return generateUniqueId.apply(self).then(function(id) {
          return resolve(id);
        });
      } else {
        return resolve(props.id);
      }
    });
    writePromise = idPromise.then(function(id) {
      var storableProps;
      props.id = id;
      storableProps = _.clone(props);
      return new Promise(function(resolve) {
        var attr, obj, ref;
        ref = self.classAttributes;
        for (attr in ref) {
          obj = ref[attr];
          switch (obj.dataType) {
            case 'integer':
              if (storableProps[attr]) {
                storableProps[attr + '[i]'] = storableProps[attr];
                delete storableProps[attr];
              }
              break;
            case 'boolean':
              if (storableProps[attr]) {
                storableProps[attr + '[b]'] = storableProps[attr];
                delete storableProps[attr];
              }
              break;
            case 'reference':
              if (obj.many) {
                delete storableProps[attr];
                if (newObjectFlag) {
                  storableProps[attr] = true;
                }
              }
              break;
            case 'string':
              if (obj.url && obj.urlBaseAttribute) {
                if (!storableProps[attr]) {
                  storableProps[attr] = _utilities.urlString(props[obj.urlBaseAttribute]);
                }
              }
          }
        }
        return self.redis.hmset(self.name + ":" + props.id, storableProps, function(err, res) {
          return resolve(storableProps);
        });
      });
    });
    indexPromise = writePromise.then(function(props) {
      var attr, indexPromiseFn, indexingPromises, multi, multipleValues, namespace, obj, ref, sortedSetName, value;
      indexingPromises = [];
      multi = self.redis.multi();
      indexPromiseFn = function(sortedSetName, attributeName) {
        var largestSortedSetSize;
        largestSortedSetSize = 9007199254740992;
        return new Promise(function(resolve) {
          return self.redis.zadd(sortedSetName, largestSortedSetSize, props.id, function(error, res) {
            return indexSortedSet.apply(self, [sortedSetName, attributeName]).then(function() {
              return resolve();
            });
          });
        });
      };
      sortedSetName = self.name + ">id";
      indexingPromises.push(indexPromiseFn(sortedSetName, "id"));
      ref = self.classAttributes;
      for (attr in ref) {
        obj = ref[attr];
        if (props[attr] === void 0) {
          continue;
        }
        value = props[attr];
        switch (obj.dataType) {
          case 'integer':
            sortedSetName = self.name + ">" + attr;
            multi.zadd(sortedSetName, parseInt(value), props.id);
            break;
          case 'string':
            if (obj.sortable) {
              sortedSetName = self.name + ">" + attr;
              indexingPromises.push(indexPromiseFn(sortedSetName, attr));
            }
            if (obj.identifiable || obj.url) {
              multi.set(self.name + "#" + attr + ":" + value, props.id);
            }
            if (obj.searchable) {
              indexingPromises.push(indexSearchableString.apply(self, [attr, value, props.id]));
            }
            break;
          case 'text':
            if (obj.searchable) {
              indexingPromises.push(indexSearchableString.apply(self, [attr, value, props.id]));
            }
            break;
          case 'boolean':
            if (_.includes([true, 'true', false, 'false'], value)) {
              multi.zadd(self.name + "#" + attr + ":" + value, 1, props.id);
            }
            break;
          case 'reference':
            namespace = obj.reverseReferenceAttribute || attr;
            if (obj.many) {
              multipleValues = _.compact(value.split(","));
              multi.sadd.apply(multi, [self.name + ":" + props.id + "#" + attr + ':' + obj.referenceModelName + 'Refs'].concat(slice.call(multipleValues)));
              multipleValues.forEach(function(vid) {
                return multi.sadd(obj.referenceModelName + ":" + vid + "#" + namespace + ':' + self.name + 'Refs', props.id);
              });
            } else {
              multi.sadd(obj.referenceModelName + ":" + value + "#" + namespace + ':' + self.name + 'Refs', props.id);
            }
            break;
          default:
            if (obj['dataType'] !== null) {
              reject(new Error("Unrecognised dataType " + obj.dataType));
            }
        }
      }
      return new Promise(function(resolve) {
        return multi.exec(function() {
          return resolve(Promise.all(indexingPromises));
        });
      });
    });
    return indexPromise.then(function() {
      return props;
    });
  };

  clearUniqueQueuedIds = function() {
    return this.redis.del(this.name + '#uniqueQueuedIds');
  };

  processWriteQueue = function() {
    var condition, hasQueue, processPromise, self, writeReturnObject;
    self = this;
    hasQueue = true;
    condition = function() {
      return hasQueue;
    };
    writeReturnObject = {};
    processPromise = _utilities.promiseWhile(condition, function() {
      var writePromise;
      return writePromise = new Promise(function(resolve, reject) {
        return self.redis.rpop(self.name + "#TmpQueue", function(error, tmpId) {
          if (tmpId) {
            return self.redis.hgetall(self.name + "#TmpQueueObj:" + tmpId, function(err, props) {
              self.redis.del(self.name + "#TmpQueueObj:" + tmpId);
              if (props) {
                return writeAttributes.apply(self, [props]).then(function(writtenObject) {
                  writeReturnObject[tmpId] = writtenObject;
                  return resolve();
                });
              } else {
                return reject(new Error("No properties in Queued Object " + self.name + "#TmpQueueObj:" + tmpId));
              }
            });
          } else {
            clearUniqueQueuedIds.apply(self);
            hasQueue = false;
            return resolve();
          }
        });
      });
    });
    return processPromise.then(function() {
      _.each(writeReturnObject, function(obj, tmpId) {
        return _oomphRedisObjectSaveQueueCallbacks["attributes_written_" + tmpId].call(self, obj);
      });
      return writeObjectArray;
    });
  };

  addToWriteQueue = function(props) {
    var p, self, tmpId;
    self = this;
    tmpId = "TmpId" + generateId() + _utilities.randomString(12);
    p = new Promise(function(resolve) {
      return self.redis.hmset(self.name + "#TmpQueueObj:" + tmpId, props, (function(_this) {
        return function(err, res) {
          return self.redis.lpush(self.name + "#TmpQueue", tmpId, function(error, newListLength) {
            return resolve(tmpId);
          });
        };
      })(this));
    });
    return p.then(function(tmpId) {
      clearTimeout(self._ORMWriteQueueTimeout);
      self._ORMWriteQueueTimeout = setTimeout(function() {
        return processWriteQueue.apply(self);
      }, 100);
      return new Promise(function(resolve) {
        var resolveFn;
        resolveFn = function(obj) {
          delete _oomphRedisObjectSaveQueueCallbacks["attributes_written_" + tmpId];
          return resolve(obj);
        };
        return _oomphRedisObjectSaveQueueCallbacks["attributes_written_" + tmpId] = resolveFn;
      });
    });
  };

  performValidations = function(dataFields) {
    var returnedValidations;
    if (_.isEmpty(dataFields)) {
      throw new Error("No valid fields given");
    }
    returnedValidations = _.map(this.classAttributes, (function(_this) {
      return function(attrObj, attrName) {
        var attrValue;
        if (attrObj.validates) {
          attrValue = dataFields[attrName];
          return validate.apply(_this, [attrObj.validates, attrName, attrValue]);
        }
      };
    })(this));
    return Promise.all(returnedValidations).then(function(validationArray) {
      var errors;
      errors = _(validationArray).flattenDeep().compact().value();
      if (!_.isEmpty(errors)) {
        throw errors;
      }
    });
  };

  sendAttributesForSaving = function(dataFields, skipValidation) {
    var attrs, props, sanitisedDataFields, validationPromise;
    if (skipValidation) {
      validationPromise = new Promise(function(resolve) {
        return resolve(true);
      });
      props = dataFields;
    } else {
      attrs = _.keys(this.classAttributes);
      attrs.push("id");
      sanitisedDataFields = _(dataFields).omit(_.isNull).omit(_.isUndefined).pick(attrs).value();
      props = sanitisedDataFields;
      validationPromise = performValidations.apply(this, [props]);
    }
    return new Promise((function(_this) {
      return function(resolve, reject) {
        if (_.isEmpty(props)) {
          reject(new Error("Properties are empty"));
        }
        return validationPromise.then(function() {
          return resolve(addToWriteQueue.apply(_this, [props]));
        }, function(validationErrors) {
          return reject(validationErrors);
        });
      };
    })(this));
  };

  module.exports = sendAttributesForSaving;

}).call(this);
