// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, _, _utilities, createObjectFromHash, find, idToCreatedAtDate, idToSeconds, numberOfExtraCharactersOnId;

  Promise = require('promise');

  _ = require('lodash');

  _utilities = require('./utilities');

  numberOfExtraCharactersOnId = 2;

  idToSeconds = function(id) {
    return parseInt(id.slice(0, -numberOfExtraCharactersOnId), 36);
  };

  idToCreatedAtDate = function(id) {
    return new Date(idToSeconds(id));
  };

  createObjectFromHash = function(hash, modelClass) {
    var key, obj, plainKey, propertyCastType, value;
    obj = {};
    if (!hash) {
      return false;
    }
    if (hash.id) {
      obj.createdAt = idToCreatedAtDate(hash.id);
    }
    for (key in hash) {
      value = hash[key];
      plainKey = key.replace(/\[\w\]$/, '');
      propertyCastType = key.match(/\[(\w)\]$/);
      if (propertyCastType) {
        if (propertyCastType[1] === 'b') {
          obj[plainKey] = value === 'true';
        } else if (propertyCastType[1] === 'i') {
          obj[plainKey] = parseInt(value);
        }
      } else {
        obj[key] = value;
      }
    }
    if (modelClass && modelClass.prototype) {
      return new modelClass(obj);
    }
    return obj;
  };

  find = function(id) {
    var getHash, modifyHashPromise, referencePromises, self;
    self = this;
    referencePromises = [];
    getHash = new Promise(function(resolve, reject) {
      return self.redis.hgetall(self.className + ":" + id, function(error, hash) {
        if (!hash) {
          return reject(new Error("Not Found"));
        } else {
          return resolve(hash);
        }
      });
    });
    modifyHashPromise = getHash.then(function(hash) {
      var attrSettings, getReferenceIdsFn, hashPromiseFn, i, len, propertyName, propertyValue, ref, referencePromise;
      ref = Object.keys(self.classAttributes);
      for (i = 0, len = ref.length; i < len; i++) {
        propertyName = ref[i];
        propertyValue = hash[propertyName];
        attrSettings = self.classAttributes[propertyName];
        if (_.isUndefined(propertyValue)) {
          continue;
        }
        if (attrSettings.dataType === 'reference') {
          if (attrSettings.many) {
            getReferenceIdsFn = function(propertyName, referenceModelName) {
              return new Promise(function(resolve, reject) {
                var referenceKey;
                referenceKey = self.className + ':' + id + '#' + propertyName + ':' + referenceModelName + 'Refs';
                return self.redis.smembers(referenceKey, function(err, ids) {
                  var hashObj;
                  hashObj = {
                    propertyName: propertyName,
                    referenceModelName: referenceModelName
                  };
                  return resolve({
                    ids: ids,
                    hashObj: hashObj
                  });
                });
              });
            };
            referencePromise = getReferenceIdsFn(propertyName, attrSettings.referenceModelName).then(function(obj) {
              var getObjects;
              getObjects = _.map(obj.ids, function(id) {
                return new Promise(function(resolve, reject) {
                  return self.redis.hgetall(obj.hashObj.referenceModelName + ':' + id, function(err, hash) {
                    return resolve(createObjectFromHash(hash));
                  });
                });
              });
              return Promise.all(getObjects).then(function(arr) {
                obj.hashObj.referenceValue = arr;
                return obj.hashObj;
              });
            });
            referencePromises.push(referencePromise);
          } else {
            hashPromiseFn = function(propertyName, propertyValue, referenceModelName) {
              return new Promise(function(resolve, reject) {
                return self.redis.hgetall(referenceModelName + ':' + propertyValue, function(err, hash) {
                  var hashObj;
                  hashObj = {
                    propertyName: propertyName,
                    propertyValue: propertyValue,
                    referenceModelName: referenceModelName
                  };
                  hashObj.referenceValue = createObjectFromHash(hash);
                  return resolve(hashObj);
                });
              });
            };
            referencePromises.push(hashPromiseFn(propertyName, propertyValue, attrSettings.referenceModelName));
          }
          delete hash[propertyName];
        }
      }
      return hash;
    });
    return modifyHashPromise.then(function(hash) {
      return Promise.all(referencePromises).then(function(referenceObjects) {
        _.each(referenceObjects, function(refObj) {
          return hash[refObj.propertyName] = refObj.referenceValue;
        });
        return createObjectFromHash(hash, self);
      });
    });
  };

  module.exports = find;

}).call(this);
